library(minfy)
library(ggplot2)
library(reshape2)
library(limma)
library(IlluminaHumanMethylation450kmanifest)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
# Libraries
library(minfi)
## base dir
baseDir<-"/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/Tutorial1_Data/"
## target minfi
targets<-read.metharray.sheet(baseDir)
## base dir
baseDir<-"/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/Tutorial1_Data/"
## target minfi
targets<-read.metharray.sheet(baseDir)
View(targets)
#
RGset<-read.metharray.exp(targets=targets)
colnames(RGset)
View(RGset)
View(RGset)
View(RGset)
View(RGset)
View(targets)
View(RGset)
View(RGset)
targets
#Extract phenotype data
pd<-pData(RGset)
View(pd)
pd
BiocManager::install("IlluminaHumanMethylation450kmanifest")
detP<-detectionP(RGset, type = "m+u")
library(IlluminaHumanMethylation450kmanifest)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
detP<-detectionP(RGset, type = "m+u")
View(detP)
detP
manifest <- getManifest(RGset)
manifest
head(getProbeInfo(manifest))
RGset<- bgcorrect.illumina(RGset)
# Convert RGChannelSet to MethylSet data
Mset<- preprocessRaw(RGset)
dim(Mset)
densityPlot(Mset, sampGroups = pd$Sample_Name) # DENSITY DISTRIBUTION
# DENSITY DISTRIBUTION
#Now plot density distribution of the samples
x11()
densityPlot(Mset, sampGroups = pd$Sample_Name) # colors based on samples
## other plots
densityBeanPlot(Mset, sampGroups = pd$Sample_Group)
mdsPlot(Mset,sampNames=pd$Sample_Name)
qc_info<-minfiQC(Mset)
BiocManager::install("IlluminaHumanMethylation450kanno.ilmn12.hg19")
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
qc_info<-minfiQC(Mset)
qc_info
# PLOT QC
plotQC(qc_info$qc)
qc_info$qc
## SAMPLE MIXUP
# Letâ€™s get the beta information of 65 SNPs
snps <- getSnpBeta(RGset)
snps
dim(snps)
# HEATMAP
library(ggplot2)
library(reshape2)
q<-qplot(x=Var1, y=Var2, data=melt(cor(snps, use="p")), fill=value, geom="tile") + scale_fill_gradient2(limits=c(-1, 1))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Either keep one or delete both
Mset <- Mset[,-8]
q<-qplot(x=Var1,y=Var2, data=melt(cor(snps, use="p")), fill=value, geom="tile") + scale_fill_gradient2(limits=c(-1, 1))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# failed probes
failed <- detP>0.01
#Fraction of failed probes/sample
colMeans(failed)
failed
dim(failed)
sum(rowMeans(failed)>0.5)
#Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci <- rownames(detP)[rowSums(detP<=0.01)>=0.5*ncol(detP)]
MsetQC<-Mset[goodLoci,]
dim(Mset) > dim(MsetQC)
dim(Mset)
dim(MsetQC)
dim(Mset)-dim(MsetQC)
MsetQC <- MsetQC[,goodSample[-8]]?
dim(detP)
MsetQC <- MsetQC[,goodSample[-8]]?
dim(detP)
dim(detP)
## remove it again
MsetQC <- MsetQC[,goodSample[-8]]?
##TOMORROW [...]
#====== Mset to GenomicMset
Gset<-mapToGenome(MsetQC)
#
goodSample<-colSums(detP<=0.01)>=0.1*nrow(detP)
dim(detP) -> deleting it
dim(detP) #deleting it
## remove it again
MsetQC <- MsetQC[,goodSample[-8]]?
##TOMORROW [...]
#====== Mset to GenomicMset
Gset<-mapToGenome(MsetQC)
## remove it again
MsetQC <- MsetQC[,goodSample[-8]]?
##TOMORROW [...]
#====== Mset to GenomicMset
Gset<-mapToGenome(MsetQC)
snps <- getSnpInfo(Gset)
head(snps,10)
# DROP SNPS
Gset <- dropLociWithSnps(Gset, snps=c("SBE","CpG"), maf=0)
dim(Gset)
# We can get beta and M-values from Gset
beta<-getBeta(Gset)
M<-getM(Gset)
beta[1:5,]
M[1:5,]
# Mset to RatioSet
ratioSet <- ratioConvert(MsetQC, what = "both", keepCN = TRUE)
beta <- getBeta(ratioSet)
M <- getM(ratioSet)
ratioSet
annotation <- getAnnotation(ratioSet)
names(annotation)
save.image(file='/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/Tutorial1_Data/')
save.image(file='/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/Tutorial1_Data/yoursession.RData')
#========================================================
## CREATE base dir
baseDir<-"/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/IDAT_Files"
#========================================================
## CREATE base dir
baseDir<-"/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/IDAT_Files"
## target minfi
targets<-read.metharray.sheet(baseDir)
tagets # see info
targets # see info
dim(targets)
# 2.2 load data
RGset<-read.metharray.exp(targets=targets)
## sample sheet: centric (chip) R01...is position of sample
# looks in spample sheet and concatenates...take them as sample ids
colnames(Sample_Name)
RGset
# 2.2 load data
RGset<-read.metharray.exp(targets=targets)
## sample sheet: centric (chip) R01...is position of sample
# looks in spample sheet and concatenates...take them as sample ids
colnames(RGset) = "Sample_Name"
## sample sheet: centric (chip) R01...is position of sample
# looks in spample sheet and concatenates...take them as sample ids
colnames(RGset)
## access phenotype data with pData function
pd = pData(RGset)
pd
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
# DETECT p-values
#BiocManager::install("IlluminaHumanMethylation450kmanifest")
det_pvalue = detectionP(RGset, type = "m+u")
library(IlluminaHumanMethylation450kmanifest)
# DETECT p-values - EPIC manifest
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
#library(IlluminaHumanMethylation450kmanifest)
#library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylationEPICmanifest)
# DETECT p-values - EPIC manifest
#BiocManager::install("IlluminaHumanMethylationEPICmanifest")
det_pvalue = detectionP(RGset, type = "m+u")
det_pvalue
header(det_pvalue)
head(det_pvalue)
## info
manifest <- getManifest(RGset)
manifest
head(getProbeInfo(manifest))
## BACKGROUND CORRECTION
RGset<- bgcorrect.illumina(RGset)
# Convert RGChannelSet to MethylSet data
Mset<- preprocessRaw(RGset) # METILE SET
dim(Mset) # 485512 of 8 samples: row and column, not 2 dim matrix!! Just raw and col
densityPlot(Mset, sampGroups = pd$Sample_Name)
densityPlot(Mset, sampGroups = pd$Sample_Group)
mdsPlot(Mset,sampNames=pd$Sample_Name) # samples overlap (sample 7 and 8)
#===============================================================================
# QUALITY CONTROL
#===============================================================================
BiocManager::install("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
#===============================================================================
# Q: How many samples are bad according to the QC plot?
# A: sample 6 far away, 1,5,4,2 grouped, 7,8 same??
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
qc_info = minfiQC(Mset)
qc_info
qc_info
# PLOT QC
plotQC(qc_info$qc) # ANYTHING ABOVE IS GOOD, UNDER BAD
qc_info$qc
View(Mset)
View(pd)
View(qc_info)
View(targets)
qc_info$qc
qc_info$qc
snps
#===============================================================================
# SAMPLE MIX (QC) to check if any sample mix accurred
snps <- getSnpBeta(RGset)
snps
dim(snps) # 65 snps, 8 samples
# heatmap -> correlation between snps for sample contam
library(ggplot2)
library(reshape2)
q<-qplot(x=Var1,y=Var2, data=melt(cor(snps, use="p")), fill=value, geom="tile") + scale_fill_gradient2(limits=c(-1, 1))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
head(RGset)
head(target)
head(target)
head(Mset)
head(manifest)
manifest
#Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(detP<=0.01)>=0.5*ncol(det_pvalue)] # presented more than 50%
#Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=0.01)>=0.5*ncol(det_pvalue)] # presented more than 50%
MsetQC = Mset[goodLoci,] # new
# print dimensions of Mset and MsetQC
dim(Mset)
dim(MsetQC)
##look how many have probes been removed
dim(Mset)-dim(MsetQC)
## good samples
goodSample = colSums(det_pvalue<=0.01)>=0.1*nrow(det_pvalue)
dim(det_pvalue)
# Q: How many SNPs are required to detect sample contamination? Can you find any trace of sample contamination between the samples?
# A: 59. Two samples are the same
dim(Mset)
# Q: How many SNPs are required to detect sample contamination? Can you find any trace of sample contamination between the samples?
# A: 59. Two samples are the same
head(Mset)
# Q: How many SNPs are required to detect sample contamination? Can you find any trace of sample contamination between the samples?
# A: 59. Two samples are the same
head(Mset$Sample_Group)
head(getProbeInfo(manifest))
View(Mset)
# Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=0.01)>=0.5*ncol(det_pvalue)] # presented more than 50%
### Remove 1 sample
Mset <- Mset[,-8]
# failed probes
failed <- detP>0.01 #
### Remove 1 sample
Mset = Mset[,-8]
# failed probes
failed <- det_pvalue>0.01 #
failed ## boolean output T,F -> calc true ones!!
dim(failed) # 48k probes, 8 samples
Mset[,-8]
# failed probes
failed = det_pvalue>0.01 #
failed ## boolean output T,F -> calc true ones!!
dim(failed) # 48k probes, 8 samples
#Fraction of failed probes/sample
colMeans(failed) # mean column, how many samples failed probes
sum(rowMeans(failed)>0.5)
# Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=0.01)>=0.5*ncol(det_pvalue)] # presented more than 50%
MsetQC = Mset[goodLoci,] # new
# print dimensions of Mset and MsetQC
dim(Mset)
dim(MsetQC)
##look how many have probes been removed
dim(Mset)-dim(MsetQC)
# Good probes having detection p-value <=0.01 and these probes cover >=50% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=0.01)>=0.5*ncol(det_pvalue)] # presented more than 50%
MsetQC = Mset[goodLoci,] # new
# print dimensions of Mset and MsetQC
dim(Mset)
dim(MsetQC)
##look how many have probes been removed
dim(Mset)-dim(MsetQC)
## good samples
goodSample = colSums(det_pvalue<=0.01)>=0.1*nrow(det_pvalue)
dim(det_pvalue)
MsetQC <- MsetQC[,goodSample[-8]]
dim(det_pvalue)
# INITIAL QC based on det p-value
# failed probes
failed = det_pvalue>1e-16 #
failed ## boolean output T,F -> calc true ones!!
dim(failed) # 48k probes, 8 samples
#Fraction of failed probes/sample
colMeans(failed) # mean column, how many samples failed probes
sum(rowMeans(failed)>0.5) #222!!
# Good probes having detection p-value <=10^16 and these probes cover >=90% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=1e-16)>=0.9*ncol(det_pvalue)] # presented more than 50%
MsetQC = Mset[goodLoci,] # new
# print dimensions of Mset and MsetQC
dim(Mset)
dim(MsetQC)
##look how many have probes been removed
dim(Mset)-dim(MsetQC)
## good samples 10^-16 (1e-16) and 30%
goodSample = colSums(det_pvalue<=1e-161)>=0.3*nrow(det_pvalue)
dim(det_pvalue) # remove again
MsetQC = MsetQC[,goodSample[-8]]
dim(det_pvalue) # remove again
dim(goodSample)
## good samples 10^-16 (1e-16) and 30%
goodSample = colSums(det_pvalue<=1e-161)>=0.3*nrow(det_pvalue)
dim(det_pvalue) # remove again
MsetQCremoved = MsetQC[,goodSample]
dim(det_pvalue) # remove again
goodSample
MsetQCremoved = MsetQC[,goodSample[-8]]
dim(MsetQC)
dim(MsetQC) - dim(MsetQCremoved)
MsetQCremoved = MsetQC[,goodSample]
D
D
## CREATE base dir
baseDir = "/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/IDAT_Files"
## target minfi
targets = read.metharray.sheet(baseDir)
targets # SEE CSV FILE INFO, name, well, plate, group, ID(NA), sex, Array, centric. NOTE: Slide = centric
## target minfi
targets = read.metharray.sheet(baseDir)
targets # SEE CSV FILE INFO, name, well, plate, group, ID(NA), sex, Array, centric. NOTE: Slide = centric
dim(targets) # 8 samples, 9 columns
# 2.2 load data
RGset = read.metharray.exp(targets=targets)
## sample sheet: centric (chip) R01...is position of sample
# looks in spample sheet and concatenates...take them as sample ids
colnames(RGset)
## access phenotype data with pData function
pd = pData(RGset)
pd
#===============================================================================
# DETECT p-values - EPIC manifest
#BiocManager::install("IlluminaHumanMethylationEPICmanifest") # testing another technology
det_pvalue = detectionP(RGset, type = "m+u")
head(det_pvalue)
## info
manifest = getManifest(RGset)
manifest
head(getProbeInfo(manifest))
## BACKGROUND CORRECTION
RGset = bgcorrect.illumina(RGset)
# Convert RGChannelSet to MethylSet data
Mset = preprocessRaw(RGset) # METILE SET
dim(Mset) # 485512 of 8 samples: row and column, not 2 dim matrix!! Just raw and col
densityPlot(Mset, sampGroups = pd$Sample_Name)
densityPlot(Mset, sampGroups = pd$Sample_Group)
mdsPlot(Mset,sampNames=pd$Sample_Name) # samples overlap (sample 7 and 8)
qc_info = minfiQC(Mset)
qc_info
# PLOT QC
plotQC(qc_info$qc) # ANYTHING ABOVE IS GOOD, UNDER BAD
qc_info$qc
#===============================================================================
# SAMPLE MIX (QC) to check if any sample mix accurred
snps <- getSnpBeta(RGset)
snps
dim(snps) # 59 snps, 8 samples
# heatmap -> correlation between snps for sample contam
library(ggplot2)
library(reshape2)
q = qplot(x=Var1,y=Var2, data=melt(cor(snps, use="p")), fill=value, geom="tile") + scale_fill_gradient2(limits=c(-1, 1))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
### Remove 1 sample
Mset = Mset[,-c(6,8)]
# INITIAL QC based on det p-value
# failed probes
failed = det_pvalue>1e-16 #
failed ## boolean output T,F -> calc true ones!!
dim(failed) # 48k probes, 8 samples
#Fraction of failed probes/sample
colMeans(failed) # mean column, how many samples failed probes
sum(rowMeans(failed)>0.5) #222!!
# Good probes having detection p-value <=10^-16 and these probes cover >=90% of the total sample
goodLoci = rownames(det_pvalue)[rowSums(det_pvalue<=1e-16)>=0.9*ncol(det_pvalue)] # presented more than 50%
MsetQC = Mset[goodLoci,] # new
dim(MsetQC)
dim(Mset)-dim(MsetQC)
# print dimensions of Mset and MsetQC
dim(Mset)
dim(MsetQC)
##look how many have probes been removed
dim(Mset)-dim(MsetQC) # 29411 probes
## good samples 10^-16 (1e-16) and 30%
goodSample = colSums(det_pvalue<=1e-161)>=0.3*nrow(det_pvalue)
dim(det_pvalue) # remove again
MsetQCremoved = MsetQC[,goodSample]
##set column names as Sample_Name
colnames(RGset)<-targets$Sample_Name
## access phenotype data with pData function
pd = pData(RGset)
pd
#===============================================================================
# DETECT p-values - EPIC manifest
#BiocManager::install("IlluminaHumanMethylationEPICmanifest") # testing another technology
det_pvalue = detectionP(RGset, type = "m+u")
head(det_pvalue)
## info
manifest = getManifest(RGset)
manifest
head(getProbeInfo(manifest))
## BACKGROUND CORRECTION
RGset = bgcorrect.illumina(RGset)
# Convert RGChannelSet to MethylSet data
Mset = preprocessRaw(RGset) # METILE SET
dim(Mset) # 485512 of 8 samples: row and column, not 2 dim matrix!! Just raw and col
qc_info = minfiQC(Mset)
qc_info
# PLOT QC
plotQC(qc_info$qc) # ANYTHING ABOVE IS GOOD, UNDER BAD
qc_info$qc
densityPlot(Mset, sampGroups = pd$Sample_Name)
densityPlot(Mset, sampGroups = pd$Sample_Group)
mdsPlot(Mset,sampNames=pd$Sample_Name) # samples overlap (sample 7 and 8)
# PLOT QC
plotQC(qc_info$qc) # ANYTHING ABOVE IS GOOD, UNDER BAD
qc_info$qc
#===============================================================================
# SAMPLE MIX (QC) to check if any sample mix accurred
snps <- getSnpBeta(RGset)
snps
dim(snps) # 59 snps, 8 samples
# heatmap -> correlation between snps for sample contam
library(ggplot2)
library(reshape2)
q = qplot(x=Var1,y=Var2, data=melt(cor(snps, use="p")), fill=value, geom="tile") + scale_fill_gradient2(limits=c(-1, 1))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
### Remove 1 sample
Mset = Mset[,-c(6,8)]
# INITIAL QC based on det p-value
# failed probes
failed = det_pvalue>1e-16 #
failed ## boolean output T,F -> calc true ones!!
dim(failed) # 866836 probes, 8 samples
#Fraction of failed probes/sample
colMeans(failed) # mean column, how many samples failed probes
sum(rowMeans(failed)>0.5) #3204
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Gset <- dropLociWithSnps(Gset, snps=c("SBE","CpG"), maf=0.05)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Mset <- dropLociWithSnps(Mset, snps=c("SBE","CpG"), maf=0.05)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Gset = dropLociWithSnps(Mset, snps=c("SBE","CpG"), maf=0.05)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Gset = dropLociWithSnps(Gset, snps=c("SBE","CpG"), maf=0.05)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
RGset_drop = dropLociWithSnps(RGset, snps=c("SBE","CpG"), maf=0.05)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Mset_drop = dropLociWithSnps(Mset, snps=c("SBE","CpG"), maf=0.05)
#===============================================================================
## Convert Mset to Gset. This is a GenomicMethyleSet file containing annotaiton with genomic information
Gset = mapToGenome(MsetQC)
#===============================================================================
## Convert Mset to Gset. This is a GenomicMethyleSet file containing annotaiton with genomic information
Gset = mapToGenome(MsetQC)
## 3.6
# The Gset provides us the opportunity of knowing whether there are any nearby SNPs.
# We want to discard any SNPs on the probe r in single
#base extension (SBE) with minor allele frequency < 0.05
Gset = dropLociWithSnps(Gset, snps=c("SBE","CpG"), maf=0.05)
## 3.7
## Now generate beta value and M values
beta = getBeta(Gset)
M = getM(Gset)
annotations = getAnnotation(Gset)
names(annotations)
dim(beta)
dim(M)
## Save your files as some of these files will be required in Practical 2
save.image("Practical1_data.RData")
## Save your files as some of these files will be required in Practical 2
save.image(file="/Users/lisy/Desktop/BIOINFO_cranfield/module_4/monday_ep_compep_dnaMetData/Tutorial1_Data/Practical1_data.RData")
setwd("~/Desktop/BIOINFO_cranfield/GP/GitHub/BSAvis_GP_2020/BSAvis")
document()
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(roxygen2)
document()
document()
document()
